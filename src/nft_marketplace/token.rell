/*
Object representing the Token Admin.
This object contains the public key of the admin responsible for minting tokens.
Note: For this project, Trudy has been designated as the admin.
*/
object token_admin {
    pubkey: byte_array = x"023c72addb4fdf09af94f0c94d7fe92a386a7e70cf8a1d85916386bb2535c7b1b1";  // Public key of the admin.
}


/*
Object representing the Fees for various operations.
This could be updateable by the admin (or another role) but isn't implemented in this example.

Potential fees:
- mint_nft: Fee for minting a new NFT.
- create_collection: Fee for creating a new NFT collection.
- add_to_favorites: Fee for adding an item to the favorites list.

Usage example (not implemented):
- Check user's balance before an operation.
- Deduct the fee from the user's balance.
- Record the transaction.

Note: The fees object is commented out as it is a concept rather than an implemented feature.
*/

/*
object fees {
    mint_nft: integer = 10;  // Fee for minting an NFT.
    create_collection: integer = 5;  // Fee for creating a collection.
    add_to_favorites: integer = 1;  // Fee for adding an item to favorites.
}
*/

/*
Entity representing the balances of users.
The public key serves as the unique identifier (primary key) for each user.
*/
entity balance {
    key pubkey: byte_array;  // Public key of the user.
    mutable amount: integer;  // Balance amount of the user.
}

/*
Entity representing a token transfer.
This keeps a historical reference of all transfers.
*/
@log entity token_transfer {
    key tx_id: integer;  // Unique identifier for the transaction.
    from_pubkey: byte_array; // Sender's public key.
    to_pubkey: byte_array;   // Receiver's public key.
    amount: integer;     // Amount of tokens transferred.
    timestamp: timestamp;  // Timestamp of the transaction.

    index from_pubkey;  // Index to query transactions by sender.
    index to_pubkey;    // Index to query transactions by receiver.
}

/*
Operation to mint tokens.
Params:
- receiver: byte_array - Public key of the user to receive the tokens.
- amount: integer - Amount of tokens to mint.
*/
operation mint_tokens(receiver: byte_array, amount: integer) {
    // Get the public key of the first signer.
    val signers = op_context.get_signers();
    require(signers.size() > 0, "No signers found");
    val admin_pubkey = signers[0];

    // Ensure the signer is the token admin.
    require(admin_pubkey == token_admin.pubkey, "Only the admin can mint tokens");

    // Ensure the receiver is registered.
    require(registered_user @ ? { .pubkey == receiver } != null, "User is not registered");
    print("User: ", receiver, " exists");

    // Ensure the amount to mint is greater than 0.
    require(amount > 0, "Amount should be greater than 0");

    // Increase the balance of the receiver.
    var user_balance = balance @ ? { .pubkey == receiver } ( .amount );
    if (user_balance == null) {
        create balance(pubkey = receiver, amount = amount);
    } else {
        update balance @ { .pubkey == receiver } ( .amount = user_balance + amount );
    }

    // Record the minting transaction from the admin to the receiver.
    var tx_id = token_transfer @ ? { } ( @sort_desc .tx_id ) limit 1;
    if (tx_id == null) {
        tx_id = 0;
    } else {
        tx_id++;
    }
    create token_transfer(tx_id = tx_id, from_pubkey = token_admin.pubkey, to_pubkey = receiver, amount = amount, timestamp = op_context.last_block_time);
}

/*
Operation to transfer tokens.
Params:
- to_pubkey: byte_array - Public key of the receiver.
- amount: integer - Amount of tokens to transfer.
*/
operation transfer(to_pubkey: byte_array, amount: integer) {
    // Get the public key of the first signer.
    val signers = op_context.get_signers();
    require(signers.size() > 0, "No signers found");
    val from_pubkey = signers[0];

    // Ensure the sender is registered.
    require(registered_user @ ? { .pubkey == from_pubkey } != null, "Sender is not registered");

    // Ensure the receiver is registered.
    require(registered_user @ ? { .pubkey == to_pubkey } != null, "Receiver is not registered");

    // Ensure the amount to transfer is greater than 0.
    require(amount > 0, "Amount should be greater than 0");

    // Check the sender's balance.
    var sender_balance = balance @ { .pubkey == from_pubkey } ( .amount );
    require(sender_balance >= amount, "Insufficient balance");

    // Deduct the amount from the sender's balance.
    update balance @ { .pubkey == from_pubkey } ( .amount = sender_balance - amount );

    // Increase the receiver's balance.
    var receiver_balance = balance @ ? { .pubkey == to_pubkey } ( .amount );
    if (receiver_balance == null) {
        create balance(pubkey = to_pubkey, amount = amount);
    } else {
        update balance @ { .pubkey == to_pubkey } ( .amount = receiver_balance + amount );
    }

    // Record the transaction.
    var tx_id = token_transfer @ ? { } ( @sort_desc .tx_id ) limit 1;
    if (tx_id == null) {
        tx_id = 0;
    } else {
        tx_id++;
    }
    create token_transfer(tx_id = tx_id, from_pubkey = from_pubkey, to_pubkey = to_pubkey, amount = amount, timestamp = op_context.last_block_time);
}
