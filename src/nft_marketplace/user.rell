/*
Entity definition for a registered user.
The 'pubkey' field serves as the unique identifier (primary key).
*/
entity registered_user {
    key pubkey: byte_array;
}

/*
Operation to register a new user.
This operation uses the public key from the transaction signers.
*/
operation register_user() {
    // Get the public key of the first signer.
    val signers = op_context.get_signers();
    require(signers.size() > 0, "No signers found");
    val pubkey = signers[0];

    // Register the user with the public key.
    create registered_user(pubkey = pubkey);
}

/*
Entity representing a Non-Fungible Token (NFT).
*/
entity nft {
    key nft_id: integer;  // Unique identifier for the NFT.
    description: text;    // Description of the NFT.
    mutable owner: byte_array;  // Owner of the NFT, can be changed.
    collection_id: integer;  // Identifier of the collection the NFT belongs to.
    created: timestamp;   // Timestamp of when the NFT was created.

    index owner;  // Index to query NFTs by owner.
    index collection_id;  // Index to query NFTs by collection ID.
}

/*
Entity representing a collection of NFTs.
*/
entity nft_collection {
    key collection_id: integer;  // Unique identifier for the collection.
    description: text;    // Description of the collection.
    mutable owner: byte_array;  // Owner of the collection, can be changed.
    created: timestamp;   // Timestamp of when the collection was created.

    index owner;  // Index to query collections by owner.
}

/*
Operation to mint a new NFT.
Params:
- description: text - Description of the NFT.
- collection_id: integer - Identifier of the collection the NFT belongs to (default is -1, meaning no collection).
*/
operation mint_nft(description: text, collection_id: integer = -1) {
    // Get the public key of the first signer.
    val signers = op_context.get_signers();
    require(signers.size() > 0, "No signers found");
    val pubkey = signers[0];

    // Ensure the user is registered.
    require(registered_user @ ? { .pubkey == pubkey } != null, "User is not registered");

    // Determine the next valid NFT ID.
    var nft_id = nft @ ? { } ( @sort_desc .nft_id ) limit 1;
    if (nft_id == null) {
        nft_id = -1;
    }
    nft_id++;

    // If a collection ID is provided, validate it.
    if (collection_id >= 0) {
        // Ensure the collection ID is valid.
        require(nft_collection @ ? { .collection_id == collection_id } ( .collection_id ) != null, "Bad collection id!");

        // Ensure the user is the owner of the collection.
        require(nft_collection @ ? { .collection_id == collection_id and .owner == pubkey } ( .collection_id ) != null, "Not collection owner!");
    }

    // Mint the NFT.
    create nft(nft_id = nft_id, description = description, owner = pubkey, collection_id = collection_id, created = op_context.last_block_time);
}

/*
Operation to create a new NFT collection.
Params:
- description: text - Description of the collection.
*/
operation create_collection(description: text) {
    // Get the public key of the first signer.
    val signers = op_context.get_signers();
    require(signers.size() > 0, "No signers found");
    val pubkey = signers[0];

    // Ensure the user is registered.
    require(registered_user @ ? { .pubkey == pubkey } != null, "User is not registered");

    // Determine the next valid collection ID.
    var collection_id = nft_collection @ ? { } ( @sort_desc .collection_id ) limit 1;
    if (collection_id == null) {
        collection_id = -1;
    }
    collection_id++;

    // Create the collection.
    create nft_collection(collection_id = collection_id, description = description, owner = pubkey, created = op_context.last_block_time);
}
