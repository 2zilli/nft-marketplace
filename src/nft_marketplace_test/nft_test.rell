@test module;

import nft_marketplace.*;

// Test creating an NFT collection
function test_create_nft_collection() {
    // Register a user
    rell.test.tx()
        .op(register_user())
        .sign(rell.test.keypairs.alice)
        .run();

    // Create an NFT collection
    rell.test.tx()
        .op(create_collection("Alice's Art Collection"))
        .sign(rell.test.keypairs.alice)
        .run();

    // Check if the collection was created
    val collection = nft_collection @ { .owner == rell.test.pubkeys.alice } ( .collection_id, .description );
    assert_equals(collection.description, "Alice's Art Collection");

    print("TRUDY: " + rell.test.pubkeys.trudy);
}

// Test minting an NFT without a collection
function test_mint_nft_without_collection() {
    // Register a user
    rell.test.tx()
        .op(register_user())
        .sign(rell.test.keypairs.bob)
        .run();

    // Mint an NFT
    rell.test.tx()
        .op(mint_nft("A unique NFT"))
        .sign(rell.test.keypairs.bob)
        .run();

    // Check if the NFT was created
    val nft_record = nft @ { .owner == rell.test.pubkeys.bob } ( .nft_id, .description, .owner, .collection_id );
    assert_equals(nft_record.description, "A unique NFT");
    assert_equals(nft_record.collection_id, -1); // -1 doesn't belong to any collection
}

// Test minting an NFT with a collection
function test_mint_nft_with_collection() {
    // Register a user and create a collection
    rell.test.tx()
        .op(register_user())
        .sign(rell.test.keypairs.charlie)
        .run();

    rell.test.tx()
        .op(create_collection("Charlie's Collection"))
        .sign(rell.test.keypairs.charlie)
        .run();

    // Get the collection ID
    val collection_id = nft_collection @ { .owner == rell.test.pubkeys.charlie } ( .collection_id );

    // Mint an NFT in the collection
    rell.test.tx()
        .op(mint_nft("An NFT in Charlie's collection", collection_id))
        .sign(rell.test.keypairs.charlie)
        .run();

    // Check if the NFT was created in the collection
    val nft_record = nft @ { .owner == rell.test.pubkeys.charlie } ( .nft_id, .description, .owner, .collection_id );
    assert_equals(nft_record.description, "An NFT in Charlie's collection");
    assert_equals(nft_record.collection_id, collection_id);
}

// Test minting an NFT with an invalid collection ID
function test_mint_nft_with_invalid_collection() {
    // Register a user
    rell.test.tx()
        .op(register_user())
        .sign(rell.test.keypairs.dave)
        .run();

    // Attempt to mint an NFT with an invalid collection ID
    assert_fails(rell.test.tx()
        .op(mint_nft("NFT with invalid collection ID", 999))
        .sign(rell.test.keypairs.dave)
        .run(*));
}

// Test minting an NFT by an unregistered user
function test_mint_nft_unregistered_user() {
    // Attempt to mint an NFT by an unregistered user
    assert_fails(rell.test.tx()
        .op(mint_nft("NFT by unregistered user"))
        .sign(rell.test.keypairs.eve)
        .run(*));
}

// Test creating an NFT collection by an unregistered user
function test_create_collection_unregistered_user() {
    // Attempt to create an NFT collection by an unregistered user
    assert_fails(rell.test.tx()
        .op(create_collection("Unregistered User's Collection"))
        .sign(rell.test.keypairs.frank)
        .run(*));
}