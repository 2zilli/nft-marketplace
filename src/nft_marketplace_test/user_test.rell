@test module;

import nft_marketplace.*;

// Test if users do not exist initially using predefined test keys
function test_user_does_not_exist_initially() {
    // Check if users do not exist initially.
    assert_equals((registered_user @* {} (.pubkey)).size(), 0);
}

// Test user registration using predefined test keys
function test_register_users() {
    // Register users for Alice and Bob.
    rell.test.tx()
        .op(register_user())
        .sign(rell.test.keypairs.alice)
        .run();

    rell.test.tx()
        .op(register_user())
        .sign(rell.test.keypairs.bob)
        .run();

    // Check if users are registered.
    assert_equals((registered_user @* {} (.pubkey)).size(), 2);
}

// Test registered user check using predefined test keys
function test_check_registered_user() {
    // Register users for Alice and Bob.
    rell.test.tx()
        .op(register_user())
        .sign(rell.test.keypairs.alice)
        .run();

    rell.test.tx()
        .op(register_user())
        .sign(rell.test.keypairs.bob)
        .run();

    // Check if Alice is registered.
    assert_equals((registered_user @ { .pubkey == rell.test.pubkeys.alice } (.pubkey)),  rell.test.keypairs.alice.pub);

    // Check if Bob is registered.
    assert_equals((registered_user @ { .pubkey == rell.test.pubkeys.bob } (.pubkey)), rell.test.keypairs.bob.pub);
}

// Test Duplicate User Registration using predefined test keys
function test_duplicate_user_registration() {
    // Register a user for Charlie.
    rell.test.tx()
        .op(register_user())
        .sign(rell.test.keypairs.charlie)
        .run();

    // Attempt to register another user with the same public key of Charlie.
    // This should fail as public keys must be unique.
    assert_fails(rell.test.tx()
        .op(register_user())
        .sign(rell.test.keypairs.charlie)
        .run(*));
}

// Test registered user check for a non-existing user using predefined test keys
function test_check_non_existing_user() {
    // Attempt to check registration for Trudy who is not registered.
    assert_null((registered_user @ ? { .pubkey == rell.test.pubkeys.trudy } (.pubkey)));
}