// Unit test module for token-related functionalities.
@test module;

import nft_marketplace.*;

// Test minting tokens
function test_mint_tokens() {
    // Register a user
    rell.test.tx()
        .op(register_user())
        .sign(rell.test.keypairs.alice)
        .run();

    // Mint tokens for Alice
    rell.test.tx()
        .op(mint_tokens(rell.test.pubkeys.alice, 100))
        .sign(rell.test.keypairs.trudy) // Trudy is the admin
        .run();

    // Check Alice's balance
    val alice_balance = balance @ { .pubkey == rell.test.pubkeys.alice } ( .amount );
    assert_equals(alice_balance, 100);

    // Check the token transfer record
    val mint_transfer = token_transfer @ { .to_pubkey == rell.test.pubkeys.alice } ( .amount );
    assert_equals(mint_transfer, 100);
}

// Test transferring tokens
function test_transfer_tokens() {
    // Register users
    rell.test.tx()
        .op(register_user())
        .sign(rell.test.keypairs.alice)
        .run();

    rell.test.tx()
        .op(register_user())
        .sign(rell.test.keypairs.bob)
        .run();

    // Mint tokens for Alice
    rell.test.tx()
        .op(mint_tokens(rell.test.pubkeys.alice, 100))
        .sign(rell.test.keypairs.trudy) // Trudy is the admin
        .run();

    // Transfer tokens from Alice to Bob
    rell.test.tx()
        .op(transfer(rell.test.pubkeys.bob, 50))
        .sign(rell.test.keypairs.alice)
        .run();

    // Check Alice's balance
    val alice_balance = balance @ { .pubkey == rell.test.pubkeys.alice } ( .amount );
    assert_equals(alice_balance, 50);

    // Check Bob's balance
    val bob_balance = balance @ { .pubkey == rell.test.pubkeys.bob } ( .amount );
    assert_equals(bob_balance, 50);

    // Check the token transfer record
    val transfer_record = token_transfer @ { .from_pubkey == rell.test.pubkeys.alice and .to_pubkey == rell.test.pubkeys.bob } ( .amount );
    assert_equals(transfer_record, 50);
}

// Test insufficient balance transfer
function test_insufficient_balance_transfer() {
    // Register users
    rell.test.tx()
        .op(register_user())
        .sign(rell.test.keypairs.alice)
        .run();

    rell.test.tx()
        .op(register_user())
        .sign(rell.test.keypairs.bob)
        .run();

    // Mint tokens for Alice
    rell.test.tx()
        .op(mint_tokens(rell.test.pubkeys.alice, 100))
        .sign(rell.test.keypairs.trudy) // Trudy is the admin
        .run();

    // Attempt to transfer more tokens than Alice has
    assert_fails(rell.test.tx()
        .op(transfer(rell.test.pubkeys.bob, 150))
        .sign(rell.test.keypairs.alice)
        .run(*));
}

// Test unauthorized minting attempt
function test_unauthorized_minting() {
    // Register a user
    rell.test.tx()
        .op(register_user())
        .sign(rell.test.keypairs.alice)
        .run();

    // Attempt to mint tokens without admin rights
    assert_fails(rell.test.tx()
        .op(mint_tokens(rell.test.pubkeys.alice, 100))
        .sign(rell.test.keypairs.bob)
        .run(*));
}
