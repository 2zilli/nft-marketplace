@test module;

import nft_marketplace.*;

// Test listing an NFT for sale
function test_list_nft_for_sale() {
    // Register a user and mint an NFT
    rell.test.tx()
        .op(register_user())
        .sign(rell.test.keypairs.alice)
        .run();

    rell.test.tx()
        .op(mint_nft("Alice's NFT"))
        .sign(rell.test.keypairs.alice)
        .run();

    // Get the NFT ID
    val alice_nft_id = nft @ { .owner == rell.test.pubkeys.alice } ( .nft_id );

    // List the NFT for sale
    rell.test.tx()
        .op(list_nft(alice_nft_id, 100))
        .sign(rell.test.keypairs.alice)
        .run();

    // Check if the NFT was listed
    val listing = marketplace_listing @ { .nft_id == alice_nft_id } ( .nft_id, .price );
    assert_equals(listing.nft_id, alice_nft_id);
    assert_equals(listing.price, 100);
}

// Test buying an NFT
function test_buy_nft() {
    // Register users and mint an NFT
    rell.test.tx()
        .op(register_user())
        .sign(rell.test.keypairs.alice)
        .run();

    rell.test.tx()
        .op(register_user())
        .sign(rell.test.keypairs.bob)
        .run();

    rell.test.tx()
        .op(mint_nft("Alice's NFT"))
        .sign(rell.test.keypairs.alice)
        .run();

    // Get the NFT ID
    val alice_nft_id = nft @ { .owner == rell.test.pubkeys.alice } ( .nft_id );

    // List the NFT for sale
    rell.test.tx()
        .op(list_nft(alice_nft_id, 100))
        .sign(rell.test.keypairs.alice)
        .run();

    // Mint tokens for Bob
    rell.test.tx()
        .op(mint_tokens(rell.test.pubkeys.bob, 200))
        .sign(rell.test.keypairs.trudy)
        .run();

    // Buy the NFT
    rell.test.tx()
        .op(buy_nft(alice_nft_id))
        .sign(rell.test.keypairs.bob)
        .run();

    // Check if the NFT was transferred to Bob
    val nft_owner = nft @ { .nft_id == alice_nft_id } ( .owner );
    assert_equals(nft_owner, rell.test.pubkeys.bob);

    // Check if the balances were updated
    val bob_balance = balance @ { .pubkey == rell.test.pubkeys.bob } ( .amount );
    assert_equals(bob_balance, 100);

    val alice_balance = balance @ { .pubkey == rell.test.pubkeys.alice } ( .amount );
    assert_equals(alice_balance, 100);

    // Check if the transaction was logged
    val log_amount = token_transfer @ { .from_pubkey == rell.test.pubkeys.bob and .to_pubkey == rell.test.pubkeys.alice } ( .amount );
    assert_equals(log_amount, 100);
}

// Test listing an NFT not owned by the user
function test_list_nft_not_owned() {
    // Register users and mint an NFT
    rell.test.tx()
        .op(register_user())
        .sign(rell.test.keypairs.alice)
        .run();

    rell.test.tx()
        .op(register_user())
        .sign(rell.test.keypairs.bob)
        .run();

    rell.test.tx()
        .op(mint_nft("Alice's NFT"))
        .sign(rell.test.keypairs.alice)
        .run();

    // Get the NFT ID
    val alice_nft_id = nft @ { .owner == rell.test.pubkeys.alice } ( .nft_id );

    // Attempt to list the NFT by Bob
    assert_fails(rell.test.tx()
        .op(list_nft(alice_nft_id, 100))
        .sign(rell.test.keypairs.bob)
        .run(*));
}

// Test buying an NFT with insufficient balance
function test_buy_nft_insufficient_balance() {
    // Register users and mint an NFT
    rell.test.tx()
        .op(register_user())
        .sign(rell.test.keypairs.alice)
        .run();

    rell.test.tx()
        .op(register_user())
        .sign(rell.test.keypairs.bob)
        .run();

    rell.test.tx()
        .op(mint_nft("Alice's NFT"))
        .sign(rell.test.keypairs.alice)
        .run();

    // Get the NFT ID
    val alice_nft_id = nft @ { .owner == rell.test.pubkeys.alice } ( .nft_id );

    // List the NFT for sale
    rell.test.tx()
        .op(list_nft(alice_nft_id, 100))
        .sign(rell.test.keypairs.alice)
        .run();

    // Mint tokens for Bob
    rell.test.tx()
        .op(mint_tokens(rell.test.pubkeys.bob, 50))
        .sign(rell.test.keypairs.trudy)
        .run();

    // Attempt to buy the NFT
    assert_fails(rell.test.tx()
        .op(buy_nft(alice_nft_id))
        .sign(rell.test.keypairs.bob)
        .run(*));
}
